KEYWORDS

Take each keyword and first try to write out what it does from memory. Next, search 
online for it and see what it really does. It may be hard because some of these are 
going to be impossible to search for, but keep trying.

If you get one of these wrong from memory, write up an index card with the correct 
definition and try to "correct" your memory. If you just didn't know about it, write 
it down, and save it for later.

Finally, use each of these in a small Python program, or as many as you can get done. 
The key here is to find out what the symbol does, make sure you got it right, correct 
it if you do not, then use it to lock it in.

and			boolean operation like "x and y" - if x is false then x, else y
del			delete variable, or remove items or ranges of items from a list by index
from		identify module
not			boolean operation like "not x" - if x is false, then True, else False
while		as in while loop. a loop that does its thing so long as something is true
as			
elif		else-if, used for if-else statements of more than two conditions
global		holds statement true for entire code block
or			boolean operation like "x and y" - if x is false, then y, else x
with		
assert		
else		final condition of an if-else statement (optional)
if			first condition of an if statement 
pass		
yield		
break		
except		
import		import modules or functions from modules
print		print argument to screen
class		
exec		
in			compare case to list
raise		
continue	
finally		
is			identity?
return		
def			define a function
for			
lambda		
try			

DATATYPES

For data types, write out what makes up each one. For example, with strings write out 
how you create a string. For numbers write out a few numbers.

True
False
None
strings
numbers
floats
lists

STRING ESCAPE SEQUENCES

For string escape sequences, use them in strings to make sure they do what you think 
they do.

\\
\'
\"
\a
\b
\f
\n
\r
\t
\v

STRING FORMATS

Same thing for string formats: use them in some strings to know what they do.

%d
%i
%o
%u
%x
%X
%e
%E
%f
%F
%g
%G
%c
%r
%s
%%

OPERATORS

Some of these may be unfamiliar to you, but look them up anyway. Find out what they 
do, and if you still can't figure it out, save it for later.

+
-
*
**
/
//
%
<
>
<=
>=
==
!=
<>
( )
[ ]
{ }
@
,
:
.
=
;
+=
-=
*=
/=
//=
%=
**=
